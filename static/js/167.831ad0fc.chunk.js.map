{"version":3,"file":"static/js/167.831ad0fc.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-05-movies/./src/components/BackLink/BackLink.module.css?aa43","components/BackLink/BackLink.jsx","webpack://goit-react-hw-05-movies/./src/pages/MovieDetailsPage/MovieDetailsPage.module.css?9108","pages/MovieDetailsPage/MovieDetailsPage.jsx","services/themoviedb-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"button\":\"BackLink_button__MFnPq\",\"icon\":\"BackLink_icon__R3GJi\"};","import PropTypes from 'prop-types';\nimport { BsArrowLeft } from \"react-icons/bs\";\nimport s from \"./BackLink.module.css\";\n\nexport const BackLink = ({ label, onClick}) => {\n    \n    return (\n        <div>\n            <button type=\"button\"\n                onClick={onClick}\n                className={s.button}>\n                <BsArrowLeft className={s.icon} />\n                {label}\n            </button>\n        </div>\n    );\n}\n\nBackLink.propTypes = {\n    label: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired,\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"MovieDetailsPage_wrapper__TH-Xi\",\"rightPart\":\"MovieDetailsPage_rightPart__A6dCp\",\"nameTitle\":\"MovieDetailsPage_nameTitle__tuQZY\",\"title\":\"MovieDetailsPage_title__63V3V\",\"text\":\"MovieDetailsPage_text__vp0Sm\",\"ganre\":\"MovieDetailsPage_ganre__J0MuH\",\"ganreItem\":\"MovieDetailsPage_ganreItem__3K+dQ\",\"bottomPart\":\"MovieDetailsPage_bottomPart__t2FL0\",\"nav\":\"MovieDetailsPage_nav__PAw0i\",\"navLink\":\"MovieDetailsPage_navLink__thqED\",\"item\":\"MovieDetailsPage_item__SzAxR\"};","import { useState, useEffect } from \"react\";\n\nimport { useParams, NavLink, Outlet, useLocation, useNavigate } from \"react-router-dom\";\n\nimport { BackLink } from \"components/BackLink/BackLink.jsx\";\nimport s from \"./MovieDetailsPage.module.css\";\nimport * as API from \"services/themoviedb-api.js\";\n\n\nexport default function MovieDetailsPage() {\n    \n    const { movieId } = useParams();\n    const [movie, setMovie] = useState(null);\n    const navigate = useNavigate();\n    const location = useLocation();\n    \n\n    useEffect(() => {\n        API.fetchMovieDetails(movieId).then(setMovie);\n    }, [movieId]);\n\n    const onGoBack = () => navigate(location?.state?.from ?? \"/\");\n    \n    return (\n        <>\n            <BackLink onClick={onGoBack} label=\"Go back\" />\n            {movie &&\n                <>\n                    <div className={s.wrapper}>\n                        <img\n                            src={API.POSTER_URL + movie.poster_path}\n                            alt={movie.title}\n                            width=\"300\"\n                            height=\"450\"\n                        />\n                        <div className={s.rightPart}>\n                            <h2 className={s.nameTitle}>{movie.title}</h2>\n                            <p className={s.text}>User Score: <span>{movie.vote_average}</span></p>\n                            <h3 className={s.title}>Overview</h3>\n                            <p className={s.text}>{movie.overview}</p>\n                            {movie.genres && (\n                                <div>\n                                    <h3 className={s.title}>Genres</h3>\n                                    <ul className={s.ganre}>\n                                        {movie.genres.map((genre, index) =>\n                                            <li key={index}\n                                                className={s.ganreItem}>\n                                                {genre.name}\n                                            </li>)}\n                                    </ul>\n                                </div>\n                            )}\n                        </div>\n                    </div>\n                    <div className={s.bottomPart}>\n                        <p className={s.text}>Additional information</p>\n                        <nav className={s.nav}>\n                            <ul>\n                                <li className={s.item}>\n                                    <NavLink\n                                        to={'cast'}\n                                        state={location.state}\n                                        className={s.navLink}>\n                                        Cast</NavLink></li>\n                                <li className={s.item}>\n                                    <NavLink\n                                        to={'reviews'}\n                                        state={location.state}\n                                        className={s.navLink}>\n                                        Reviews</NavLink></li>\n                            </ul>\n                        </nav>\n                    </div>\n                </>\n                \n            \n            }\n            <Outlet />\n        </>\n    )\n}\n","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '1a4768bd62313a9ba272b58353515c76';\n\nexport const POSTER_URL = 'https://image.tmdb.org/t/p/w500';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n    const response = await fetch(url, config);\n    return response.ok\n        ? await response.json()\n        : Promise.reject(new Error('Not Found'));\n}\n\n\nexport function fetchTrendingMovies() {\n    return fetchWithErrorHandling(\n        `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n    )\n}\n\nexport function fetchSearchMovies(query) {\n    return fetchWithErrorHandling(\n        `${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    )\n}\n\nexport function fetchMovieDetails(movieId) {\n    return fetchWithErrorHandling(\n        `${BASE_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    )\n}\n\nexport function fetchMovieCast(movieId) {\n    return fetchWithErrorHandling(\n        `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    )\n}\n\nexport function fetchMovieReviews(movieId) {\n    return fetchWithErrorHandling(\n        `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    )\n}"],"names":["BackLink","label","onClick","type","className","s","MovieDetailsPage","movieId","useParams","useState","movie","setMovie","navigate","useNavigate","location","useLocation","useEffect","API","then","state","from","src","poster_path","alt","title","width","height","vote_average","overview","genres","map","genre","index","name","to","BASE_URL","API_KEY","POSTER_URL","fetchWithErrorHandling","url","config","fetch","response","ok","json","Promise","reject","Error","fetchTrendingMovies","fetchSearchMovies","query","fetchMovieDetails","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}