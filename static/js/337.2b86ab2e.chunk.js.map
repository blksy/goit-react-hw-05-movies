{"version":3,"file":"static/js/337.2b86ab2e.chunk.js","mappings":"4LACA,EAAuB,yBAAvB,EAAuD,yBAAvD,EAAuF,yB,SCG1EA,EAAa,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEnBC,GAAWC,EAAAA,EAAAA,MAEjB,OACI,eAAIC,UAAWC,EAAf,SACKJ,GAAUA,EAAOK,KAAI,SAAAC,GAAK,OACvB,eACIH,UAAWC,EADf,UAEI,SAAC,KAAD,CACIG,GAAE,kBAAaD,EAAME,IACrBC,MAAO,CAAEC,KAAMT,GACfE,UAAWC,EAHf,SAIKE,EAAMK,SANNL,EAAME,W,kHCV/B,EAAuB,yBAAvB,EAAwD,0B,SCMlDI,EAAgB,CAClBC,MAAO,IAGEC,EAAa,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAWzB,OACI,SAAC,KAAD,CACIH,cAAeA,EACfG,SAZa,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACA,KAAxBD,EAAOH,MAAMK,QAIjBH,EAASC,EAAOH,OAChBI,MAJIE,EAAAA,EAAAA,IAAM,4BAQV,UAGI,UAAC,KAAD,CACIC,aAAa,MACbjB,UAAWC,EAFf,WAGI,SAAC,KAAD,CACIiB,KAAK,OACLC,KAAK,QACLnB,UAAWC,KAEf,mBACIiB,KAAK,SADT,0B,kBCzBD,SAASE,IAEpB,OAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOxB,EAAP,KAAe2B,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAsBF,EAAaG,IAAI,UAG7CC,EAAAA,EAAAA,YAAU,WACc,KAAhBR,GAIJS,EAAAA,GAAsBT,GACjBU,MAAK,SAAAC,GACGA,EAASC,QAAQC,QAClBnB,EAAAA,GAAAA,MAAA,gCAAqCM,EAArC,MAEJE,EAAUS,EAASC,cAE5B,CAACZ,KAGJQ,EAAAA,EAAAA,YAAU,WACNF,GACFL,EAAeK,KAEd,CAACA,IAUJ,OACI,iCACI,SAACjB,EAAD,CAAYC,SATC,SAACwB,GAClBb,EAAea,GACfZ,EAAU,IACVG,EAAgB,CAAEjB,MAAO0B,EAAMrB,aAO3B,SAACnB,EAAA,EAAD,CAAYC,OAAQA,S,4MCjD1BwC,EAAW,gCACXC,EAAU,mCAEHC,EAAa,kCAAnB,SAEQC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GAAzD,SAC2BC,MAAMF,EAAKC,GADtC,YACUT,EADV,QAEoBW,GAFpB,iCAGgBX,EAASY,OAHzB,gDAIUC,QAAQC,OAAO,IAAIC,MAAM,cAJnC,2GAQO,SAASC,IACZ,OAAOT,EAAuB,GAAD,OACtBH,EADsB,sCACgBC,IAI1C,SAASY,EAAkBxC,GAC9B,OAAO8B,EAAuB,GAAD,OACtBH,EADsB,gCACUC,EADV,iCAC0C5B,EAD1C,gCAK1B,SAASyC,EAAkBC,GAC9B,OAAOZ,EAAuB,GAAD,OACtBH,EADsB,iBACLe,EADK,oBACcd,EADd,oBAK1B,SAASe,EAAeD,GAC3B,OAAOZ,EAAuB,GAAD,OACtBH,EADsB,iBACLe,EADK,4BACsBd,EADtB,oBAK1B,SAASgB,EAAkBF,GAC9B,OAAOZ,EAAuB,GAAD,OACtBH,EADsB,iBACLe,EADK,4BACsBd,EADtB","sources":["webpack://goit-react-hw-05-movies/./src/components/MoviesList/MoviesList.module.css?de3d","components/MoviesList/MoviesList.jsx","webpack://goit-react-hw-05-movies/./src/components/SearchForm/SearchForm.module.css?d6f1","components/SearchForm/SearchForm.jsx","pages/MoviesPage/MoviesPage.jsx","services/themoviedb-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list\":\"MoviesList_list__0Owr9\",\"link\":\"MoviesList_link__8rTGX\",\"item\":\"MoviesList_item__eePYv\"};","import PropTypes from 'prop-types';\nimport { Link, useLocation } from \"react-router-dom\";\nimport s from \"./MoviesList.module.css\";\n\nexport const MoviesList = ({ movies }) => {\n    \n    const location = useLocation();\n    \n    return (\n        <ul className={s.list}>\n            {movies && movies.map(movie =>\n                <li key={movie.id}\n                    className={s.item}>\n                    <Link\n                        to={`/movies/${movie.id}`}\n                        state={{ from: location }}\n                        className={s.link}>\n                        {movie.title}\n                    </Link>\n                </li>\n            )}\n        </ul>\n    );\n}\n\nMoviesList.propTypes = {\n    movies: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number,\n            title: PropTypes.string,\n        }),\n    ).isRequired,\n};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"SearchForm_form__o80os\",\"input\":\"SearchForm_input__HOxJo\"};","import PropTypes from 'prop-types';\nimport { Formik, Form, Field } from \"formik\";\nimport { toast } from \"react-hot-toast\";\n\nimport s from \"./SearchForm.module.css\";\n\n\nconst initialValues = {\n    query: '',\n};\n\nexport const SearchForm = ({ onSubmit }) => {\n    \n    const handleSubmit = (values, { resetForm }) => {\n        if (values.query.trim() === '') {\n            toast('Enter name of the movie');\n            return;\n        }\n        onSubmit(values.query);\n        resetForm();\n    }\n\n    return (\n        <Formik\n            initialValues={initialValues}\n            onSubmit={handleSubmit}>\n            <Form\n                autoComplete=\"off\"\n                className={s.form}>\n                <Field\n                    type=\"text\"\n                    name=\"query\"\n                    className={s.input}\n                />\n                <button\n                    type=\"submit\">Search</button>\n            </Form>\n        </Formik>\n    );\n}\n\nSearchForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n};","import { useState, useEffect } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { toast } from \"react-hot-toast\";\nimport { SearchForm } from \"components/SearchForm/SearchForm.jsx\";\nimport { MoviesList } from \"components/MoviesList/MoviesList.jsx\";\nimport * as API from \"services/themoviedb-api.js\";\n\n\n\nexport default function MoviesPage() {\n \n    const [searchQuery, setSearchQuery] = useState(\"\");\n    const [movies, setMovies] = useState([]);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const currentSearchParams = searchParams.get('query');\n    \n    \n    useEffect(() => {\n        if (searchQuery === '') {\n            return;\n        }\n\n        API.fetchSearchMovies(searchQuery)\n            .then(response => {\n                if (!response.results.length) {\n                    toast.error(`No information about \"${searchQuery}\"`)\n                }\n                setMovies(response.results)\n            });\n    }, [searchQuery]);\n\n\n    useEffect(() => {\n    if (currentSearchParams) {\n      setSearchQuery(currentSearchParams);\n    }\n    }, [currentSearchParams]);\n    \n\n    const onFormSubmit = (value) => {\n        setSearchQuery(value);\n        setMovies([]);\n        setSearchParams({ query: value.trim() });\n    };\n\n\n    return (\n        <>\n            <SearchForm onSubmit={onFormSubmit} />\n            <MoviesList movies={movies}/>  \n        </>\n    )\n}\n\n","const BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '1a4768bd62313a9ba272b58353515c76';\n\nexport const POSTER_URL = 'https://image.tmdb.org/t/p/w500';\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n    const response = await fetch(url, config);\n    return response.ok\n        ? await response.json()\n        : Promise.reject(new Error('Not Found'));\n}\n\n\nexport function fetchTrendingMovies() {\n    return fetchWithErrorHandling(\n        `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n    )\n}\n\nexport function fetchSearchMovies(query) {\n    return fetchWithErrorHandling(\n        `${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`\n    )\n}\n\nexport function fetchMovieDetails(movieId) {\n    return fetchWithErrorHandling(\n        `${BASE_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`\n    )\n}\n\nexport function fetchMovieCast(movieId) {\n    return fetchWithErrorHandling(\n        `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n    )\n}\n\nexport function fetchMovieReviews(movieId) {\n    return fetchWithErrorHandling(\n        `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n    )\n}"],"names":["MoviesList","movies","location","useLocation","className","s","map","movie","to","id","state","from","title","initialValues","query","SearchForm","onSubmit","values","resetForm","trim","toast","autoComplete","type","name","MoviesPage","useState","searchQuery","setSearchQuery","setMovies","useSearchParams","searchParams","setSearchParams","currentSearchParams","get","useEffect","API","then","response","results","length","value","BASE_URL","API_KEY","POSTER_URL","fetchWithErrorHandling","url","config","fetch","ok","json","Promise","reject","Error","fetchTrendingMovies","fetchSearchMovies","fetchMovieDetails","movieId","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}